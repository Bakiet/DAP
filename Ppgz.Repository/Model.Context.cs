//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Ppgz.Repository
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class EntitiesDap : DbContext
    {
        public EntitiesDap()
            : base("name=EntitiesDap")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<acumuladores> acumuladores { get; set; }
        public virtual DbSet<almacenes> almacenes { get; set; }
        public virtual DbSet<andenes> andenes { get; set; }
        public virtual DbSet<asn> asn { get; set; }
        public virtual DbSet<aspnetroles> aspnetroles { get; set; }
        public virtual DbSet<aspnetuserclaims> aspnetuserclaims { get; set; }
        public virtual DbSet<aspnetuserlogins> aspnetuserlogins { get; set; }
        public virtual DbSet<aspnetusers> aspnetusers { get; set; }
        public virtual DbSet<citas> citas { get; set; }
        public virtual DbSet<componenteselectricos> componenteselectricos { get; set; }
        public virtual DbSet<componenteselectricos_sustituciones> componenteselectricos_sustituciones { get; set; }
        public virtual DbSet<componentesmecanicos> componentesmecanicos { get; set; }
        public virtual DbSet<componentesmecanicos_sustituciones> componentesmecanicos_sustituciones { get; set; }
        public virtual DbSet<configuraciones> configuraciones { get; set; }
        public virtual DbSet<crs> crs { get; set; }
        public virtual DbSet<cuentaproveedores> cuentaproveedores { get; set; }
        public virtual DbSet<cuentas> cuentas { get; set; }
        public virtual DbSet<cuentasmensajes> cuentasmensajes { get; set; }
        public virtual DbSet<envios> envios { get; set; }
        public virtual DbSet<equipos> equipos { get; set; }
        public virtual DbSet<estatuscitas> estatuscitas { get; set; }
        public virtual DbSet<etiquetas> etiquetas { get; set; }
        public virtual DbSet<facturas> facturas { get; set; }
        public virtual DbSet<fallas> fallas { get; set; }
        public virtual DbSet<fallascorreos> fallascorreos { get; set; }
        public virtual DbSet<herramientas> herramientas { get; set; }
        public virtual DbSet<horariorieles> horariorieles { get; set; }
        public virtual DbSet<horarios> horarios { get; set; }
        public virtual DbSet<impuls_logs> impuls_logs { get; set; }
        public virtual DbSet<informes> informes { get; set; }
        public virtual DbSet<kitdap> kitdap { get; set; }
        public virtual DbSet<mantenimientocorrectivo> mantenimientocorrectivo { get; set; }
        public virtual DbSet<mantenimientopreventivo> mantenimientopreventivo { get; set; }
        public virtual DbSet<mensajes> mensajes { get; set; }
        public virtual DbSet<niveleseervicio> niveleseervicio { get; set; }
        public virtual DbSet<obras> obras { get; set; }
        public virtual DbSet<obrasgestion> obrasgestion { get; set; }
        public virtual DbSet<ordencompra> ordencompra { get; set; }
        public virtual DbSet<ordencompradetalle> ordencompradetalle { get; set; }
        public virtual DbSet<perfiles> perfiles { get; set; }
        public virtual DbSet<previos> previos { get; set; }
        public virtual DbSet<protocolos> protocolos { get; set; }
        public virtual DbSet<proveedores> proveedores { get; set; }
        public virtual DbSet<requerimientos> requerimientos { get; set; }
        public virtual DbSet<requerimientoscorreos> requerimientoscorreos { get; set; }
        public virtual DbSet<rieles> rieles { get; set; }
        public virtual DbSet<scalealmacen> scalealmacen { get; set; }
        public virtual DbSet<sugerencias> sugerencias { get; set; }
        public virtual DbSet<tipocuentas> tipocuentas { get; set; }
        public virtual DbSet<tipousuario> tipousuario { get; set; }
        public virtual DbSet<ventas> ventas { get; set; }
        public virtual DbSet<devoluciones> devoluciones { get; set; }
        public virtual DbSet<pagos> pagos { get; set; }
        public virtual DbSet<componentesmecanicos_tipos> componentesmecanicos_tipos { get; set; }
        public virtual DbSet<equipo_tipo> equipo_tipo { get; set; }
        public virtual DbSet<componenteselectronicos_tipos> componenteselectronicos_tipos { get; set; }
        public virtual DbSet<fallas_status> fallas_status { get; set; }
        public virtual DbSet<fallas_tipo> fallas_tipo { get; set; }
        public virtual DbSet<envios_status> envios_status { get; set; }
        public virtual DbSet<requerimientos_status> requerimientos_status { get; set; }
        public virtual DbSet<requerimientos_tipo> requerimientos_tipo { get; set; }
        public virtual DbSet<obras_contactos> obras_contactos { get; set; }
        public virtual DbSet<archivos> archivos { get; set; }
        public virtual DbSet<gerenciaresponsable> gerenciaresponsable { get; set; }
        public virtual DbSet<events> events { get; set; }
        public virtual DbSet<obrasdato> obrasdato { get; set; }
    
        public virtual int add_user(string email, string passwordHash, string phoneNumber, string pUserName, string tipo, string nombre, string apellido, string cargo, Nullable<int> perfilId, Nullable<System.DateTime> terminosCondicionesFecha, Nullable<int> usuarioIdTx, Nullable<int> cuentaId, ObjectParameter userId, ObjectParameter messageError)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordHashParameter = passwordHash != null ?
                new ObjectParameter("PasswordHash", passwordHash) :
                new ObjectParameter("PasswordHash", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var pUserNameParameter = pUserName != null ?
                new ObjectParameter("pUserName", pUserName) :
                new ObjectParameter("pUserName", typeof(string));
    
            var tipoParameter = tipo != null ?
                new ObjectParameter("Tipo", tipo) :
                new ObjectParameter("Tipo", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var apellidoParameter = apellido != null ?
                new ObjectParameter("Apellido", apellido) :
                new ObjectParameter("Apellido", typeof(string));
    
            var cargoParameter = cargo != null ?
                new ObjectParameter("Cargo", cargo) :
                new ObjectParameter("Cargo", typeof(string));
    
            var perfilIdParameter = perfilId.HasValue ?
                new ObjectParameter("PerfilId", perfilId) :
                new ObjectParameter("PerfilId", typeof(int));
    
            var terminosCondicionesFechaParameter = terminosCondicionesFecha.HasValue ?
                new ObjectParameter("TerminosCondicionesFecha", terminosCondicionesFecha) :
                new ObjectParameter("TerminosCondicionesFecha", typeof(System.DateTime));
    
            var usuarioIdTxParameter = usuarioIdTx.HasValue ?
                new ObjectParameter("UsuarioIdTx", usuarioIdTx) :
                new ObjectParameter("UsuarioIdTx", typeof(int));
    
            var cuentaIdParameter = cuentaId.HasValue ?
                new ObjectParameter("CuentaId", cuentaId) :
                new ObjectParameter("CuentaId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("add_user", emailParameter, passwordHashParameter, phoneNumberParameter, pUserNameParameter, tipoParameter, nombreParameter, apellidoParameter, cargoParameter, perfilIdParameter, terminosCondicionesFechaParameter, usuarioIdTxParameter, cuentaIdParameter, userId, messageError);
        }
    
        public virtual int config_appointment(Nullable<System.DateTime> pFecha, ObjectParameter pTotal)
        {
            var pFechaParameter = pFecha.HasValue ?
                new ObjectParameter("pFecha", pFecha) :
                new ObjectParameter("pFecha", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("config_appointment", pFechaParameter, pTotal);
        }
    
        public virtual int delete_account(Nullable<int> p_cuentaId, ObjectParameter messageError)
        {
            var p_cuentaIdParameter = p_cuentaId.HasValue ?
                new ObjectParameter("p_cuentaId", p_cuentaId) :
                new ObjectParameter("p_cuentaId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("delete_account", p_cuentaIdParameter, messageError);
        }
    }
}
